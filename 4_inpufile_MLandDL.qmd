# Generating the Input File for Machine Learning and Deep Learning Models

> Aim: To prepare the dataset for downstream predictive modeling, we merged three key sources of information:
>
> -   The cleaned training and test database (`training_db_cleaned and test_db_cleaned from complete_metadata.RData`)
> -   A new dataset containing assigned MIC values for additional isolates (`CAMDA25_training_con_MIC_y_fenotipo_1.csv`)
> -   The gene family matrix derived from the RGI analysis ([`2025_Training_and_testing_strict.tsv.gz`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/pangenomic_analysis/2025_Training_and_testing_strict.tsv.gz))
>
> This unified dataset serves as the foundation for training and evaluating machine learning (ML) and deep learning (DL) models aimed at predicting antimicrobial resistance patterns.
>
> -   **Author**: Evelia Coss
> -   **Date**: 1/July/2025
> -   **Input files:**
>     -   [`complete_metadata.RData`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/complete_metadata.RData): This RData file contains a consolidated set of key objects used in workflows for antimicrobial resistance analysis and sequencing metadata. It supports smooth transitions between preprocessing, integration, and analysis stages. See complete details in [**Chapter 2**](https://eveliacoss.github.io/CAMDA2025_metadatos/2_Preprocessing_CAMDApublicdata.html).
>     -   [`2025_Training_and_testing_strict.tsv.gz`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/rgi_analysis/2025_Training_and_testing_strict.tsv.gz)`:` Table containing results from RGI analysis using training and test datasets. This file originates from [Dataset2025](https://github.com/ccm-bioinfo/Camda_resistance_24-25/tree/main/DataSets/2025). It includes the following columns:
>         -   **accession**, **genus**, **species**, **antibiotic** - Sample metadata. Note: some species annotations may contain inconsistencies due to accession-level discrepancies.
>
>         -   **phenotype**, **measurement_value** - Prediction targets for modeling.
>
>         -   **categoria_recodificada**- Proposed standardized MIC (Minimum Inhibitory Concentration) value for each sample (old version, 2024).
>
>         -   **columns starting with 300...** - feature data. Contains counts of genes and SNPs conferring antibiotic resistance. Columns are labeled using ARO ids (see Section 3 for details). SNP features are labeled with the ARO id, followed by a dash (`-`) and the amino acid substitution.
>
>         -   ::: callout-warning
>             No hay resultados para 42 accession. Más información en el **STEP 3**
>             :::
> -   Output files:
>     -   [`training_and_test_inputfile_cleaned.tsv.gz`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/training_and_test_inputfile_cleaned.tsv.gz): Cleaned dataset (training ans test) containing standardized species names, reassigned MIC values (recategorized_mic), and curated phenotypes (assign_phenotype). This file is formatted and ready for input into machine learning (ML) and deep learning (DL) workflows. It includes the following columns:
>         -   **genus**, **species**, **accession**, **phenotype**, **antibiotic,** **measurement_value** -Sample metadata with corrected species information. *Source:* `training_db_cleaned`
>         -   **recategorized_MIC**- Updated (2025) standardized Minimum Inhibitory Concentration (MIC) values for each sample.
>         -   **assign_phenotype** –Reassigned phenotype labels, limited to “Resistant” and “Susceptible” categories.
>         -   **type**: Dataset classification between training and test datasets.
>         -   **columns starting with 300...** - feature data. Contains counts of genes and SNPs conferring antibiotic resistance. Columns are labeled using ARO ids (see Section 3 for details). SNP features are labeled with the ARO id, followed by a dash (`-`) and the amino acid substitution.
> -   Funcitions
>     -   [`process_mic_data()`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/functions/process_mic_data_function.R): This function processes a `.tsv` file containing MIC (Minimum Inhibitory Concentration) data and assigns a phenotype (`Susceptible` or `Resistant`) based on bacterial genus and recategorized MIC values. It applies quality control filters and includes defensive checks. Required Input Columns: `measurement_value`, `accession`, `new_genus`, `phenotype`. Supported Genera: *Klebsiella, Escherichia, Salmonella, Streptococcus, Staphylococcus, Pseudomonas, Acinetobacter, Campylobacter*, and *Neisseria*.
>
>     -   ::: callout-important
>         ## When phenotype_assigned is NA
>
>         -   If either `new_genus` or recategorized MIC is missing
>
>         -   If the genus is not defined in the interpretation table
>
>         -   If the MIC doesn't fall within any of the defined bins
>         :::

### Import Data

```{r}
library(tidyverse)
library(janitor)
library(here)

# > training and test database
# Load metadata cleaned and antibiogram information
load(here("rawdata/TrainAndTest_cleaned", "complete_metadata.RData"))
# antibiograms_db, test_db_cleaned, training_db_cleaned, sra_metadata_db, test_completeInfo_db,  training_completeInfo_db

# > MIC values
#new_mic_db <- read_csv(file= here("rawdata/TrainAndTest_cleaned","CAMDA25_training_con_MIC_y_fenotipo_1.csv")) %>%
   # Standardizes column names: converts them to lowercase,
  # replaces spaces and special characters with underscores
 # janitor::clean_names() 
#Rows: 5420 Columns: 8
# renombrar columnas
#names(new_mic_db)[names(new_mic_db) == "new_genus"] <- "new_species"

# > gene family matrix (strict)

# Read the .csv file into R
rgi_results <- read_tsv(file= here("rawdata/rgi_analysis","2025_Training_and_testing_strict.tsv.gz")) %>%
   # Standardizes column names: converts them to lowercase,
  # replaces spaces and special characters with underscores
  janitor::clean_names() 
# Rows: 9471 Columns: 1076

colnames(rgi_results)[colSums(is.na(rgi_results)) > 0]
```

## STEP 1. Asignar nuevo valor de MIC y fenotipo por genero 

```{r}
source(here("functions", "process_mic_data_function.R"))
```

```{r}
training_indir <- here("rawdata/TrainAndTest_cleaned", "training_metadata_cleaned.tsv")
training_outdir <- here("rawdata/TrainAndTest_cleaned", "training_metadata_cleaned_new_mic.tsv")

# Genera un nuevo mic y fenotipo por especie, ademas de almacenar el archivo en TSV
training_new_mic_db <- process_mic_data(training_indir, training_outdir)

head(training_new_mic_db)
dim(training_new_mic_db)
```

433 valores NA en 'measurement_value'

Analizar la informacion de Intermediate

```{r}
filter(training_new_mic_db, phenotype == "Intermediate") %>% head()
```

## STEP 2. Unir archivos de test y training 

Join information according with metadata

```{r}
# 1. Remove columns from testing
test_inputfile <- test_db_cleaned 
test_inputfile$type <- "test"
test_inputfile$phenotype_assigned <- 0
test_inputfile$recategorized_mic <- 0
dim(test_inputfile) # [1] 4055    12

# Unificar orden de las columnas
global_cols <- colnames(test_inputfile)

# 2. Unique IDs
# Join New MIC values (accession, phenotype_assigned, mic_new)
training_inputfile <- training_new_mic_db %>%
  select(-new_genus) 
training_inputfile$type <- "training"
# reordenar las columnas
training_inputfile <- training_inputfile %>% 
  select(any_of(global_cols))
dim(training_inputfile) # [1] 5720    12

length(unique(training_new_mic_db$accession)) 
# [1] 5449

# 4. Join files 
training_and_test_inputfile <- rbind(training_inputfile, test_inputfile)
# eliminar duplicados
training_and_test_inputfile <- training_and_test_inputfile %>% distinct()
table(training_and_test_inputfile$type)
# test training 
# 4055    5555 #9775

dim(training_and_test_inputfile)
# [1] 9610   12

length(unique(training_and_test_inputfile$accession))# 9504 = 4055+5449

# Join with RGI results
training_and_test_inputfile_complete <- training_and_test_inputfile %>% 
  # Join rgi results
  left_join(select(rgi_results, -genus, -species, -phenotype, 
                   -antibiotic, -measurement_value, -categoria_recodificada), by = "accession") %>% 
  mutate(antibiotic = if_else( antibiotic == "tetracycline", "TET", antibiotic))

# unique(training_and_test_inputfile$antibiotic)
# [1] "TET" "ERY" "GEN" "CAZ"

# Dimensions
dim(training_and_test_inputfile_complete) # 9610 1081

length(unique(training_and_test_inputfile_complete$accession)) #9504
```

colnames

```{r}
colnames(training_and_test_inputfile)

str(training_and_test_inputfile)
```

Cambiar NA por ceros, excepto de algunas columnas

```{r}
training_and_test_inputfile_complete <- training_and_test_inputfile_complete %>%
  mutate(across(
    .cols = -c(genome, measurement_value, ani, phenotype_assigned, recategorized_mic),
    .fns  = ~ ifelse(is.na(.), 0, .)
  ))
```

```{r}
head(training_and_test_inputfile_complete) %>% 
  DT::datatable()
```

Save file

```{r}
write_tsv(training_and_test_inputfile_complete, file = here("rawdata/TrainAndTest_cleaned", "training_and_test_inputfile_cleaned.tsv.gz"))
```

Checar columnas con NA

```{r}
colnames(training_and_test_inputfile_complete)[colSums(is.na(training_and_test_inputfile_complete)) > 0]
```

Checar duplicados

```{r}
training_duplicadas <- training_and_test_inputfile[duplicated(training_and_test_inputfile), ]

training_duplicadas %>% 
  filter(type == "training") 
```

## STEP 3. Verificaciones en el archivo de training

Verificar que training no tenga NA

```{r}
# Detectar columnas con NA
training_and_test_inputfile_complete %>%
  filter(type == "training") %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  select(where(~ . > 0)) %>%
  names()

# Que valores arroja
unique(training_and_test_inputfile_complete$recategorized_mic)

# Verificar las filas que dan NA
training_and_test_inputfile_complete %>%
  filter(type == "training") %>%
  filter(is.na(recategorized_mic)) %>%
  DT::datatable()
```

## Datos faltantes de RGI

Cuantas accesiones si tienes y no tienen resultados en RGI por accession:

```{r}
# Accession únicas en cada dataset
accession_completo <- training_and_test_inputfile_complete %>% 
  distinct(accession)

accession_con_rgi <- rgi_results %>% 
  distinct(accession)

# Unir y clasificar
resumen_rgi <- accession_completo %>%
  mutate(has_rgi = accession %in% accession_con_rgi$accession) 
resumen_rgi_number <- resumen_rgi %>%
  count(has_rgi)

resumen_rgi_number
```

De cuales especies no tenemos esta informacion

```{r}
# Obtener los SRA sin IDs
training_sin_resultados_IDs <- resumen_rgi %>% 
  filter(has_rgi == "FALSE")
training_sin_resultados_IDs <- training_sin_resultados_IDs$accession

# lista de acceesiones sin informacion 
training_sin_resultados_db <- training_and_test_inputfile_complete %>% 
  filter(accession %in% training_sin_resultados_IDs) 

training_sin_resultados_db %>% 
  DT::datatable()
```

Cuantas especies no tienen informacion

```{r}
table(training_sin_resultados_db$scientific_name_new)
```

::: callout-warning
Los resultados de RGI no tienen resultados para 42 accession IDs.
:::

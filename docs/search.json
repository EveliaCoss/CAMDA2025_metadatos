[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CAMDA2025 metadatos",
    "section": "",
    "text": "CAMDA 2025\nCAMDA2025_metadatos is a curated collection of scripts, datasets, and documentation supporting the CAMDA 2025 challenge on antimicrobial resistance. The repository provides:\n\nCleaned and standardized metadata for pangenomic analyses\nScripts for data cleaning, validation, and preparation of ML/DL-ready inputs\nOutputs from quality control, phenotype recategorization, and MIC standardization pipelines",
    "crumbs": [
      "CAMDA 2025"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Datasets",
    "section": "",
    "text": "Datasets provideb by CAMDA2025:\n\ntraining set: CAMDA training set (training_metadata_db).\n\ngenus – Bacterial genus assigned to the sample.\n\n\n\nspecies – Reported species name; may include annotation inconsistencies based on accession.\naccession – Unique sample identifier from the original database.\nphenotype – Reported antimicrobial susceptibility phenotype (e.g., susceptible, intermediate, resistant).\nantibiotic – Antibiotic used to assess susceptibility.\nmeasurement_sign – Comparison symbol used in MIC reporting (e.g., =, &lt;, &gt;).\nmeasurement_value – Numeric value of the Minimum Inhibitory Concentration (MIC).\nmeasurement_unit – Unit of measurement for MIC (commonly µg/mL).\nlaboratory_typing_method – Method used for strain typing (e.g., sequencing, PCR).\nlaboratory_typing_platform – Instrument or platform used (e.g., Illumina, Nanopore).\ntesting_standard – Testing guideline followed (e.g., CLSI, EUCAST).\ntesting_standard_year – Year of the applied testing standard.\npublication – Identifier for the original study or source publication.\nisolation_source – Biological or environmental source from which the sample was isolated (e.g., blood, urine, soil).\nisolation_country – Country where the sample was collected.\ncollection_date – Date the sample was collected or reported.\n\ntest set: CAMDA test set (test_metadata_db).\n\ngenus – Bacterial genus assigned to the sample.\n\n\n\nspecies – Reported species name; may include inconsistencies depending on the data source.\naccession – Unique identifier for the isolate or sample.\nphenotype and measurement_value– In this dataset, represented as \"?\", indicating that it is an unknown value to be predicted using ML/DL models as part of the CAMDA challenge.\nantibiotic – Antibiotic tested against the isolate.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html",
    "href": "2_Preprocessing_CAMDApublicdata.html",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "",
    "text": "2.1 Load packages\nCode\nlibrary(tidyverse)\nlibrary(DT)        # Tablas bonitas\nlibrary(here)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#step-1.-import-metadata-and-change-format",
    "href": "2_Preprocessing_CAMDApublicdata.html#step-1.-import-metadata-and-change-format",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.2 STEP 1. Import Metadata and change format",
    "text": "2.2 STEP 1. Import Metadata and change format\n\n\nCode\n# &gt; training dataset\ntraining_metadata &lt;- read_csv(here(\"rawdata/TrainAndTest_dataset\",  \"training_dataset.csv\"))\n\n\nRows: 6144 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (15): genus, species, accession, phenotype, antibiotic, measurement_sign...\ndbl  (1): measurement_value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# rename species\ntraining_metadata_db &lt;- training_metadata %&gt;%\n  mutate(scientific_name_CAMDA = paste(genus, species, sep = \" \")) \n# Rows: 6144 Columns: 16── Column\n\n#NOTA: This file contain NA in measurement_value \n\n# &gt; test dataset\ntest_metadata &lt;- read_csv(here(\"rawdata/TrainAndTest_dataset\",  \"testing_template.csv\"))\n\n\nRows: 5345 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): genus, species, accession, phenotype, antibiotic, measurement_value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# rename species\ntest_metadata_db &lt;- test_metadata %&gt;%\n  mutate(scientific_name_CAMDA = paste(genus, species, sep = \" \")) %&gt;% \n  mutate(antibiotic = if_else(antibiotic == \"tetracycline\", \"TET\", antibiotic))\n# Rows: 5345 Columns: 6── Column\n\nunique(test_metadata_db$antibiotic)\n\n\n[1] \"GEN\" \"TET\" \"ERY\" \"CAZ\"\n\n\nCode\n# [1] \"GEN\"          \"TET\"          \"ERY\"          \"CAZ\"          \"tetracycline\"\nunique(test_metadata_db$antibiotic)\n\n\n[1] \"GEN\" \"TET\" \"ERY\" \"CAZ\"\n\n\nCode\n# [1] \"GEN\" \"TET\" \"ERY\" \"CAZ\"\n\n# &gt; Load public metadata from NCBI\nsra_metadata &lt;- read_csv(here(\"metadata\", \"sra-metadata.csv\")) \n\n\nRows: 11510 Columns: 47\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (26): Run, AssemblyName, download_path, Experiment, LibraryName, Librar...\ndbl  (10): spots, bases, spots_with_mates, avgLength, size_MB, InsertSize, I...\nlgl   (9): g1k_pop_code, source, g1k_analysis_group, Sex, Disease, Affection...\ndttm  (2): ReleaseDate, LoadDate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nsra_metadata_db &lt;- sra_metadata %&gt;% janitor::clean_names() %&gt;%  # para limpiar y estandarizar los nombres de columnas de un data frame\n  select(run, library_strategy, library_selection, library_source, platform, model, bio_project, bio_sample, scientific_name) %&gt;%\n  # renombrar columnas\n  rename(accession = run, scientific_name_complete = scientific_name)\n# Rows: 11510 Columns: 47── Column specification\n\n# Reduce name\n# Quedarme con las primeras dos palabras\nsra_metadata_db$scientific_name_NCBI &lt;- word(sra_metadata_db$scientific_name_complete, 1, 2)\n\n# &gt; Antibiogram\n# Combined antibiogram dataset from NCBI, ENA, and BV-BRC\n# from: https://zenodo.org/records/14876710\n\n# Define URL and local destination\nanti_url &lt;- \"https://zenodo.org/record/15809334/files/antibiograms.tsv.zip\"\ndestfile &lt;- here(\"metadata\", \"antibiograms_v2.tsv.zip\")\n# Download the compressed file\ndownload.file(url = anti_url, destfile = destfile, mode = \"wb\")\n# Descomprimir el .zip\nunzip(destfile, exdir = \"metadata\")\n# Comprimir en zip\noriginal_file &lt;- here(\"metadata\", \"antibiograms.tsv\")\ngz_file &lt;- here(\"metadata\",\"antibiograms_v2.tsv.gz\")\nR.utils::gzip(original_file, destname = gz_file, overwrite = TRUE)\n\n# Read the .tsv.gz file into R\n# Date: February 16, 2025\n# antibiograms_metadata\nantibiograms_db &lt;- readr::read_tsv(destfile) %&gt;%\n# Clean antibiogram metadata\n# antibiograms_db &lt;- antibiograms_metadata %&gt;%\n  # Standardizes column names: converts them to lowercase,\n  # replaces spaces and special characters with underscores\n  janitor::clean_names() %&gt;%\n  # Renames the columns\n  rename(\n    accession = reads,\n    scientific_name_Antibiogram = species\n  )\n\n\nRows: 1404850 Columns: 14\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (14): biosample, sra_biosample, species, antibiotic, phenotype, measurem...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# &gt; Train dataset with GTDB\n# Define URL and local destination\ngtdb_train_url &lt;- \"https://raw.githubusercontent.com/ccm-bioinfo/CAMDA2025_AntibioticResistance/main/preprocessing/metadata/train.ani.csv\"\n\ndestfile &lt;- here(\"rawdata/gtdb_results\", \"train.ani.csv\")\n\n# Download the compressed file\ndownload.file(url = gtdb_train_url, destfile = destfile, mode = \"wb\")\n\n# Read the .csv file into R\ntrain_gtdb_result &lt;- readr::read_csv(destfile)\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 5752 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (16): old_species, new_species, accession, phenotype, antibiotic, measur...\ndbl  (3): ani, measurement_value, publication\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# [1] 5752   19\n# Falta eliminar los generos diferentes\n\n# Sin accession repetidos\n# all(duplicated(train_gtdb_result$accession))\n\n# &gt; Test dataset with GTDB\n# Define URL and local destination\ngtdb_test_url &lt;- \"https://raw.githubusercontent.com/ccm-bioinfo/CAMDA2025_AntibioticResistance/main/preprocessing/metadata/test.ani.csv\"\n\ndestfile &lt;- here(\"rawdata/gtdb_results\", \"test.ani.csv\")\n\n# Download the compressed file\ndownload.file(url = gtdb_test_url, destfile = destfile, mode = \"wb\")\n\n# Read the .csv file into R\ntest_gtdb_result &lt;- readr::read_csv(destfile)\n\n\nRows: 5345 Columns: 9\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): old_species, new_species, accession, phenotype, antibiotic, measure...\ndbl (1): ani\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# [1] 5345    9\n\n\nDistribution of SRA IDs\n\n\nCode\n# Count unique accessions per species in the training metadata\ntrain_counts &lt;- training_metadata_db %&gt;%\n  group_by(scientific_name_CAMDA) %&gt;%\n  summarise(train_num_accessions = n_distinct(accession))\n\n# Count unique accessions per species in the testing metadata\ntest_counts &lt;- test_metadata_db %&gt;%\n  group_by(scientific_name_CAMDA) %&gt;%\n  summarise(test_num_accessions = n_distinct(accession))\n\n# Combine the counts by species, keeping all species present in the training set\ncombined_counts &lt;- train_counts %&gt;%\n  left_join(test_counts, by = \"scientific_name_CAMDA\") %&gt;%\n  # Replace NA in testing counts with 0 for species not present in the testing data\n  mutate(test_num_accessions = ifelse(is.na(test_num_accessions), 0, test_num_accessions))\n\n# Display the combined counts table\ncombined_counts\n\n\n# A tibble: 9 × 3\n  scientific_name_CAMDA    train_num_accessions test_num_accessions\n  &lt;chr&gt;                                   &lt;int&gt;               &lt;int&gt;\n1 Acinetobacter baumannii                   488                 597\n2 Campylobacter jejuni                      537                 410\n3 Escherichia coli                          512                 510\n4 Klebsiella pneumoniae                     791                 700\n5 Neisseria gonorrhoeae                     741                 679\n6 Pseudomonas aeruginosa                    571                 548\n7 Salmonella enterica                       640                 700\n8 Staphylococcus aureus                     571                 597\n9 Streptococcus pneumoniae                  607                 604\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThese tables may contain duplicates and incorrect annotations in the species names.\n\n\n\n2.2.1 Functions\n\n2.2.1.1 Compare with public data\n\n\nCode\nsource(\"functions/compare_sp_function.R\")\n\n\nThe resulting dataset includes two status columns: status and status_reference:\n\nstatus indicates how the species annotation from the CAMDA dataset compares to external sources:\n\nMatched_NCBI_Antibiogram: CAMDA matches both NCBI and antibiogram data.\nMatched_NCBI: CAMDA matches only NCBI data.\nMatched_Antibiogram: CAMDA matches only the antibiogram data.\nMissing_All: No sufficient external data available for comparison.\n\nstatus_reference evaluates the consistency between the two external sources (NCBI and antibiogram):\n\nGood_sources: NCBI and antibiogram annotations agree with each other.\nVerify_sources: NCBI and antibiogram annotations disagree and require further manual verification to ensure data reliability.\n\n\nWhen the species annotations provided by NCBI and the antibiogram metadata do not match, it raises concerns about the accuracy of the sample’s taxonomic identity. Such discrepancies may indicate mislabeling, contamination, or outdated records. Therefore, it is essential to verify the original sources to ensure the reliability of downstream analyses.\n\n\n2.2.1.2 Check species name matches between CAMDA and NCBI\n\n\nCode\nsource(here(\"functions\", \"compare_genus_function.R\"))\n\n\nFind how many species have matching names between CAMDA and NCBI to identify correctly annotated entries.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#check-gtdb-dataset",
    "href": "2_Preprocessing_CAMDApublicdata.html#check-gtdb-dataset",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.3 Check GTDB dataset",
    "text": "2.3 Check GTDB dataset\nJoin information\n\n\nCode\ngtdb_results &lt;- rbind(\n  # train\n  train_gtdb_result %&gt;% \n  select(old_species, new_species, accession, genome) ,\n  # test\n  test_gtdb_result %&gt;% \n  select(old_species, new_species, accession, genome) \n)\n\ndim(gtdb_results) # 5752+5345\n\n\n[1] 11097     4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#step-2.-cleaning-metadata-information",
    "href": "2_Preprocessing_CAMDApublicdata.html#step-2.-cleaning-metadata-information",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.4 STEP 2. Cleaning metadata information",
    "text": "2.4 STEP 2. Cleaning metadata information\nThe information for the SRA IDs in the test and training datasets was verified:\n\nSRA IDs found in both test and training sets were removed from the test set, keeping them only in the training set.\nRemove the SRA entries that belong to different genus.\n\n\n2.4.1 Exclude overlapping SRA IDs from the test set, retaining them only in the training set\nWe detected that 1,290 SRA IDs are shared between both files.\n\n\nCode\ntesting_metadata_cleaned &lt;- test_metadata_db %&gt;% \n  # Remove the test IDs that are shared with the training set\n  filter(!(accession %in% training_metadata_db$accession)) %&gt;% # 1,290\n  # Unir con la informacion de gtdb\n  left_join(select(test_gtdb_result,\n                   new_species, accession, genome, ani), by =\"accession\") %&gt;%\n  # redondear ANI\n  mutate(ani = round(ani, 3))\n\n#  4055 SRA IDs accessions by row\nnrow(testing_metadata_cleaned) #4055\n\n\n[1] 4055\n\n\nCode\n# Numero de accesiones\nlength(unique(testing_metadata_cleaned$accession))#4055\n\n\n[1] 4055\n\n\nCode\n# Sin accession duplicados\nall(duplicated(testing_metadata_cleaned$accession))\n\n\n[1] FALSE\n\n\nCode\n# Una sola accesion por fila\n\n# Sin ani con NA\nall(is.na(testing_metadata_cleaned$ani))\n\n\n[1] FALSE\n\n\nSave file:\n\n\nCode\n# Create new folder\n#dir.create(\"../rawdata/TrainAndTest_cleaned\")\nwrite_tsv(testing_metadata_cleaned, file = here(\"rawdata/TrainAndTest_cleaned\", \"testing_metadata_cleaned.tsv\"), quote = \"none\")\n\n\nCheck information\n\n\nCode\nlength(unique(testing_metadata_cleaned$accession))\n\n\n[1] 4055\n\n\nCode\n#[1] 4055\nlength(unique(test_gtdb_result$accession)) #  1,290 SRA IDs are shared between both files.\n\n\n[1] 5345\n\n\nCode\n#[1] 5345\n\n# &gt; Informacion de GTDB dataset\n# Filtrar solo los test que no aparecen en training\ntest_gtdb_cleaned &lt;- test_gtdb_result %&gt;% \n  filter(accession %in% testing_metadata_cleaned$accession) %&gt;% \n  # Redondear ANI\n  mutate(ani = round(ani, 3))\ndim(test_gtdb_cleaned)\n\n\n[1] 4055    9\n\n\nCode\n# [1] 4055    9\n\n\n\n2.4.1.1 Check species name matches between CAMDA and public data\nVerificar especies y eliminar datos incorrectos\n\n\nCode\n# POR MODIFICAR\n# Ya la debo de cambiar porque GTDB es mejor en los resultados que contiene\ntest_completeInfo_db &lt;- compare_sp(testing_metadata_cleaned, sra_metadata_db, antibiograms_db)\ndim(test_completeInfo_db)\n\n\n[1] 5458    6\n\n\nCode\n#[1] 5458    6\n\n# ---- scientific_name_new -------\n# Detect different genus between species using GTDB dataset\ntest_completeinfo_cleaned_db &lt;- compare_genus(testing_metadata_cleaned, old_col = \"scientific_name_CAMDA\", new_col = \"new_species\")\n\n\nExtrayendo el genero de las especies\n\n\nDeterminando especies erroneas\n\n\nAgregar clasificaciones\n\n\nCode\ntable(test_completeinfo_cleaned_db$genus_match)\n\n\n\n TRUE FALSE    NA \n 3906     6   143 \n\n\nCode\n#  TRUE FALSE    NA \n#  3906     6   143 \n\n# agregar nueva clasiifacion en los nombres de las especies\ntest_completeinfo_cleaned_db$scientific_name_new &lt;- ifelse(\n  # Si new_species es NA, mantiene scientific_name_CAMDA.\n  is.na(test_completeinfo_cleaned_db$new_species),\n  test_completeinfo_cleaned_db$scientific_name_CAMDA,\n  # Si son iguales, conserva scientific_name_CAMDA.\n  ifelse(\n    test_completeinfo_cleaned_db$scientific_name_CAMDA == test_completeinfo_cleaned_db$new_species,\n         test_completeinfo_cleaned_db$scientific_name_CAMDA,\n         test_completeinfo_cleaned_db$new_species))\n\ndim(test_completeinfo_cleaned_db)\n\n\n[1] 4055   14\n\n\nCode\n# [1] 4055   14\n\n\nHay 6 SRA con problemas en la especie\n\n\nCode\ntest_completeinfo_cleaned_db %&gt;% \n  filter(genus_match == \"FALSE\")\n\n\n# A tibble: 6 × 14\n  genus         species     accession  phenotype antibiotic measurement_value\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;      &lt;chr&gt;            \n1 Klebsiella    pneumoniae  SRR5385772 ?         GEN        ?                \n2 Neisseria     gonorrhoeae SRR3360755 ?         TET        ?                \n3 Acinetobacter baumannii   SRR1180875 ?         CAZ        ?                \n4 Acinetobacter baumannii   SRR1180930 ?         CAZ        ?                \n5 Acinetobacter baumannii   SRR1187769 ?         CAZ        ?                \n6 Campylobacter jejuni      ERR9766771 ?         TET        ?                \n# ℹ 8 more variables: scientific_name_CAMDA &lt;chr&gt;, new_species &lt;chr&gt;,\n#   genome &lt;chr&gt;, ani &lt;dbl&gt;, old_genus &lt;chr&gt;, new_genus &lt;chr&gt;,\n#   genus_match &lt;fct&gt;, scientific_name_new &lt;chr&gt;\n\n\nUnificar las columnas entre training y test\n\n\nCode\n# global information \nglobal_cols &lt;- c(\"genus\", \"species\", \"scientific_name_new\", \"accession\", \"genome\", \"phenotype\", \"antibiotic\", \"measurement_value\", \"ani\")\n\n# test informacion\ntest_db_cleaned &lt;- test_completeinfo_cleaned_db %&gt;%\n  select(any_of(global_cols))\n\n\nSave data\n\n\nCode\nwrite_tsv(test_db_cleaned, file = here(\"rawdata/TrainAndTest_cleaned\", \"Test_allstatus_sp_reference_metadata.tsv.gz\"), quote = \"none\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#check-training-dataset---sra-duplicated",
    "href": "2_Preprocessing_CAMDApublicdata.html#check-training-dataset---sra-duplicated",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.5 Check training dataset - SRA duplicated",
    "text": "2.5 Check training dataset - SRA duplicated\n\n2.5.1 How many SRA IDs are duplicated within the training set?\n\n\nCode\n# How many unique that we have?\ncat(\"Number of SRA ID unique (accessions)\", length(unique(training_metadata$accession)), sep = \" \") # 5458 SRA ID uniqued\n\n\nNumber of SRA ID unique (accessions) 5458\n\n\nCode\n# Numero de SRA IDs que se repiten varias veces?\ntraining_metadata_duplicated  &lt;- table(training_metadata$accession)\nsum(training_metadata_duplicated &gt; 1) # 502 SRA IDs\n\n\n[1] 502\n\n\nCode\n# How many duplicated that we have?\ntraining_duplicated_table &lt;- training_metadata %&gt;%\n  group_by(accession) %&gt;%\n  filter(n() &gt; 1) %&gt;%   # filtra accession con más de una ocurrencia\n  summarise(duplicados = n()) %&gt;%\n  arrange(desc(duplicados))\n\n# Only IDs (502 SRA IDs)\ntraining_SRAIDs_duplicated &lt;- training_duplicated_table$accession\n\n# Obtain duplicated names\ntraining_duplicated_db &lt;- training_metadata %&gt;% \n  filter(accession %in% training_SRAIDs_duplicated)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#step-3.-cleaning-training-dataset",
    "href": "2_Preprocessing_CAMDApublicdata.html#step-3.-cleaning-training-dataset",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.6 STEP 3. Cleaning training dataset",
    "text": "2.6 STEP 3. Cleaning training dataset\n\n\nCode\ntraining_metadata_cleaned &lt;- training_metadata_db %&gt;% \n  # Unir con la informacion de gtdb\n  left_join(select(train_gtdb_result,\n                   new_species, accession, genome, ani), \n            by =\"accession\", relationship = \"many-to-many\") %&gt;%\n  # redondear ANI\n  mutate(ani = round(ani, 3)) %&gt;%\n  # Eliminar filas duplicadas\n  distinct()\n\n#  5458 SRA IDs accessions by row\nnrow(training_metadata_cleaned) #5729\n\n\n[1] 5729\n\n\nCode\n# Numero de accesiones\nlength(unique(training_metadata_cleaned$accession))#5458\n\n\n[1] 5458\n\n\nCode\n# Sin ani con NA\nall(is.na(training_metadata_cleaned$ani))\n\n\n[1] FALSE\n\n\nCode\n# Si hay filas con mas duplicados, accesiones con mas genomas\n\n\nChecar IDs repetidos\n\n\nCode\ntable_accession &lt;- table(training_metadata_cleaned$accession)\nrepeated_accessions &lt;- table_accession[table_accession &gt; 1]\nlength(repeated_accessions)  # Cuántos accesiones se repiten, 220\n\n\n[1] 220\n\n\nCode\n# Ver filas duplicadas completas\nduplicated_rows &lt;- training_metadata_cleaned %&gt;%\n  filter(accession %in% names(repeated_accessions)) %&gt;%\n  arrange(accession)\n\nduplicated_rows %&gt;%\n  DT::datatable()\n\n\n\n\n\n\nCheck information\n\n\nCode\nlength(unique(training_metadata_cleaned$accession))\n\n\n[1] 5458\n\n\nCode\n#[1] 5458\nlength(unique(train_gtdb_result$accession)) #  \n\n\n[1] 5458\n\n\nCode\n#[1] 5458\n\ndim(train_gtdb_result) #5752\n\n\n[1] 5752   19\n\n\nCode\ndim(training_metadata_cleaned) # 5729\n\n\n[1] 5729   20\n\n\nLimpieza de especies\n\n\nCode\n# POR MODIFICAR\n# Ya la debo de cambiar porque GTDB es mejor en los resultados que contiene\ntraining_completeInfo_db &lt;- compare_sp(training_metadata_db, sra_metadata_db, antibiograms_db)\ndim(training_completeInfo_db)\n\n\n[1] 5458    6\n\n\nCode\n#[1] 5458    6\n\n# ---- scientific_name_new -------\n# Detect different genus between species using GTDB dataset\ntraining_completeinfo_cleaned_db &lt;- compare_genus(training_metadata_cleaned, old_col = \"scientific_name_CAMDA\", new_col = \"new_species\") %&gt;%\n  # Delete problems with species\n   filter(genus_match != FALSE) \n\n\nExtrayendo el genero de las especies\n\n\nDeterminando especies erroneas\n\n\nAgregar clasificaciones\n\n\nCode\ntable(training_completeinfo_cleaned_db$genus_match)\n\n\n\n TRUE FALSE    NA \n 5237     0   483 \n\n\nCode\n#  TRUE FALSE    NA \n#  5497     9  1874 \n\n# agregar nueva clasiifacion en los nombres de las especies\ntraining_completeinfo_cleaned_db$scientific_name_new &lt;- ifelse(\n  # Si new_species es NA, mantiene scientific_name_CAMDA.\n  is.na(training_completeinfo_cleaned_db$new_species),\n  training_completeinfo_cleaned_db$scientific_name_CAMDA,\n  # Si son iguales, conserva scientific_name_CAMDA.\n  ifelse(\n    training_completeinfo_cleaned_db$scientific_name_CAMDA == training_completeinfo_cleaned_db$new_species,\n         training_completeinfo_cleaned_db$scientific_name_CAMDA,\n         training_completeinfo_cleaned_db$new_species))\n\ndim(training_completeinfo_cleaned_db)\n\n\n[1] 5720   24\n\n\nCode\n# [1] 5720   12\n\n# Global information\ntraining_completeinfo_cleaned_db %&gt;%  \n  # Visualizar informacion en una tabla bonita\n  DT::datatable()\n\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html\n\n\n\n\n\n\n\n\nCode\ntable(training_completeinfo_cleaned_db$scientific_name_new)\n\n\n\n   Acinetobacter baumannii  Acinetobacter courvalinii \n                       564                          1 \nAcinetobacter nosocomialis       Campylobacter jejuni \n                         3                        537 \n          Escherichia coli        Klebsiella africana \n                       507                          1 \n     Klebsiella pneumoniae Klebsiella quasipneumoniae \n                       767                         11 \n      Klebsiella variicola      Neisseria gonorrhoeae \n                        12                        751 \n    Pseudomonas aeruginosa        Salmonella enterica \n                       571                        715 \n     Staphylococcus aureus   Streptococcus pneumoniae \n                       573                        707 \n\n\nUnificar las columnas entre training y test\n\n\nCode\ncolumns_to_select &lt;- c(global_cols, \"old_genus\", \"new_genus\")\n\n# test informacion\ntraining_db_cleaned &lt;- training_completeinfo_cleaned_db %&gt;%\n  select(any_of(columns_to_select)) %&gt;%\n  # Si new_genus tiene NA, colocar la informacion de old_genus y si no, dejar igual\n  mutate(new_genus = if_else(is.na(new_genus),old_genus, new_genus )) %&gt;%\n  select(-old_genus)\n\ndim(training_db_cleaned)\n\n\n[1] 5720   10\n\n\nSave data\n\n\nCode\nwrite_tsv(training_completeinfo_cleaned_db, file = here(\"rawdata/TrainAndTest_cleaned\", \"Training_allstatus_sp_reference_metadata.tsv.gz\"), quote = \"none\")\n\n\nAqui debo unir el archivo de nuevos MIC y fenotipos\nSave data\n\n\nCode\nwrite_tsv(training_db_cleaned, file = here(\"rawdata/TrainAndTest_cleaned\", \"training_metadata_cleaned.tsv\"), quote = \"none\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#about-missing-data",
    "href": "2_Preprocessing_CAMDApublicdata.html#about-missing-data",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.7 About missing data",
    "text": "2.7 About missing data\n\n\nCode\n# NO CORRER - POR EDITAR\ntraining_completeinfo_cleaned_db %&gt;%\n  group_by(scientific_name_CAMDA) %&gt;%\n  summarise(\n    total_samples = n(),\n    n_missing_data = sum(status == \"Missing_All\"),\n    pct_missing_data = (n_missing_data / total_samples) * 100) %&gt;%\n  arrange(desc(n_missing_data)) %&gt;%\n# Change NA by Zero\n mutate(across(everything(), ~replace_na(., 0)))\n\n\n\n\n\n\n\n\nImportant\n\n\n\n7 out of 9 species have missing or incorrect data.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#verify-information-sources",
    "href": "2_Preprocessing_CAMDApublicdata.html#verify-information-sources",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.8 Verify information sources",
    "text": "2.8 Verify information sources\nThe data from NCBI does not match the information available in the antibiogram records.\n\n\nCode\ntraining_verify_data &lt;- training_db_cleaned %&gt;%\n  filter(status_reference == \"Verify_sources\")\n\n\n\n\nCode\ntable(training_completeInfo_db$status_reference)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "2_Preprocessing_CAMDApublicdata.html#step-4-test-vs-public-data",
    "href": "2_Preprocessing_CAMDApublicdata.html#step-4-test-vs-public-data",
    "title": "2  Comparing CAMDA metadata related with public data",
    "section": "2.9 STEP 4: Test vs public data",
    "text": "2.9 STEP 4: Test vs public data\nVerify the total number of SRA IDs.\n\n\nCode\n# Count unique accessions per species in the training metadata\ntrain_counts_cleaned &lt;- training_db_cleaned %&gt;%\n  group_by(scientific_name_new) %&gt;%\n  summarise(trainClean_num_accessions = n_distinct(accession))\n\n# Count unique accessions per species in the testing metadata\ntest_counts_cleaned &lt;- test_db_cleaned %&gt;%\n  group_by(scientific_name_new) %&gt;%\n  summarise(testClean_num_accessions = n_distinct(accession))\n\n# Combine the counts by species, keeping all species present in the training set\ncombined_counts_completed &lt;- train_counts_cleaned %&gt;%\n  left_join(test_counts_cleaned, by = \"scientific_name_new\") \n\n# sum columns\ndf_total &lt;- combined_counts_completed %&gt;%\n  summarise(across(where(is.numeric), ~sum(.x, na.rm = TRUE))) %&gt;%\n  mutate(rowname = \"Total\") %&gt;%\n  select(rowname, everything())\n\ncombined_counts_completed &lt;- combined_counts_completed %&gt;%\n  mutate(rowname = rownames(.)) %&gt;%\n  select(rowname, everything()) %&gt;%\n  bind_rows(df_total)\n\n# Display the combined counts table\ncombined_counts_completed %&gt;% \n  select(-rowname) %&gt;%\n  DT::datatable()\n\n\n\n\n\n\nSave\n\n\nCode\nsave(antibiograms_db, test_db_cleaned, training_db_cleaned, sra_metadata_db, test_completeinfo_cleaned_db, training_completeinfo_cleaned_db,  file = here(\"rawdata/TrainAndTest_cleaned\", \"complete_metadata.RData\"))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Comparing CAMDA metadata related with public data</span>"
    ]
  },
  {
    "objectID": "4_inpufile_MLandDL.html",
    "href": "4_inpufile_MLandDL.html",
    "title": "3  Generating the Input File for Machine Learning and Deep Learning Models",
    "section": "",
    "text": "3.0.1 Import Data\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(janitor)\n\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\n\nCode\nlibrary(here)\n\n\nhere() starts at /Users/ecoss/Documents/CAMDA2025_metadatos\n\n\nCode\n# &gt; training and test database\n# Load metadata cleaned and antibiogram information\nload(here(\"rawdata/TrainAndTest_cleaned\", \"complete_metadata.RData\"))\n# antibiograms_db, test_db_cleaned, training_db_cleaned, sra_metadata_db, test_completeInfo_db,  training_completeInfo_db\n\n# &gt; MIC values\n#new_mic_db &lt;- read_csv(file= here(\"rawdata/TrainAndTest_cleaned\",\"CAMDA25_training_con_MIC_y_fenotipo_1.csv\")) %&gt;%\n   # Standardizes column names: converts them to lowercase,\n  # replaces spaces and special characters with underscores\n # janitor::clean_names() \n#Rows: 5420 Columns: 8\n# renombrar columnas\n#names(new_mic_db)[names(new_mic_db) == \"new_genus\"] &lt;- \"new_species\"\n\n# &gt; gene family matrix (strict)\n\n# Read the .csv file into R\nrgi_results &lt;- read_tsv(file= here(\"rawdata/rgi_analysis\",\"2025_Training_and_testing_strict.tsv.gz\")) %&gt;%\n   # Standardizes column names: converts them to lowercase,\n  # replaces spaces and special characters with underscores\n  janitor::clean_names() \n\n\nRows: 9471 Columns: 1076\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (6): genus, species, accession, phenotype, antibiotic, measurement_value\ndbl (1070): categoria_recodificada, ARO3000464-A121D, ARO3000464-G120K, ARO3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# Rows: 9471 Columns: 1076\n\ncolnames(rgi_results)[colSums(is.na(rgi_results)) &gt; 0]\n\n\n[1] \"measurement_value\"      \"categoria_recodificada\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Generating the Input File for Machine Learning and Deep Learning Models</span>"
    ]
  },
  {
    "objectID": "4_inpufile_MLandDL.html#step-1.-asignar-nuevo-valor-de-mic-y-fenotipo-por-genero",
    "href": "4_inpufile_MLandDL.html#step-1.-asignar-nuevo-valor-de-mic-y-fenotipo-por-genero",
    "title": "3  Generating the Input File for Machine Learning and Deep Learning Models",
    "section": "3.1 STEP 1. Asignar nuevo valor de MIC y fenotipo por genero",
    "text": "3.1 STEP 1. Asignar nuevo valor de MIC y fenotipo por genero\n\n\nCode\nsource(here(\"functions\", \"process_mic_data_function.R\"))\n\n\n\n\nCode\ntraining_indir &lt;- here(\"rawdata/TrainAndTest_cleaned\", \"training_metadata_cleaned.tsv\")\ntraining_outdir &lt;- here(\"rawdata/TrainAndTest_cleaned\", \"training_metadata_cleaned_new_mic.tsv\")\n\n# Genera un nuevo mic y fenotipo por especie, ademas de almacenar el archivo en TSV\ntraining_new_mic_db &lt;- process_mic_data(training_indir, training_outdir)\n\nhead(training_new_mic_db)\n\n\n      genus     species   scientific_name_new  accession           genome\n1 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR1661238 ENA_SAMN03201584\n2 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR5827180 ENA_SAMN07351025\n3 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR5827125 ENA_SAMN07351011\n4 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR5827026 ENA_SAMN07351174\n5 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR5827271 ENA_SAMN07351256\n6 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR5827340 ENA_SAMN07351167\n    phenotype antibiotic measurement_value   ani new_genus recategorized_mic\n1 Susceptible        TET              0.25 0.998 Neisseria              0.25\n2 Susceptible        TET              0.12 0.997 Neisseria              0.12\n3 Susceptible        TET              0.12 0.997 Neisseria              0.12\n4 Susceptible        TET              0.12 0.998 Neisseria              0.12\n5 Susceptible        TET              0.25 0.997 Neisseria              0.25\n6 Susceptible        TET              0.12 0.998 Neisseria              0.12\n  phenotype_assigned\n1        Susceptible\n2        Susceptible\n3        Susceptible\n4        Susceptible\n5        Susceptible\n6        Susceptible\n\n\nCode\ndim(training_new_mic_db)\n\n\n[1] 5720   12\n\n\n433 valores NA en ‘measurement_value’\nAnalizar la informacion de Intermediate\n\n\nCode\nfilter(training_new_mic_db, phenotype == \"Intermediate\") %&gt;% head()\n\n\n      genus     species   scientific_name_new  accession           genome\n1 Neisseria gonorrhoeae Neisseria gonorrhoeae SRR5827090 ENA_SAMN07351304\n2 Neisseria gonorrhoeae Neisseria gonorrhoeae  ERR191803 ENA_SAMEA1690498\n3 Neisseria gonorrhoeae Neisseria gonorrhoeae  ERR350030 ENA_SAMEA2076734\n4 Neisseria gonorrhoeae Neisseria gonorrhoeae  ERR223681 ENA_SAMEA1690355\n5 Neisseria gonorrhoeae Neisseria gonorrhoeae  ERR449502 ENA_SAMEA2201910\n6 Neisseria gonorrhoeae Neisseria gonorrhoeae  ERR363613 ENA_SAMEA2150841\n     phenotype antibiotic measurement_value   ani new_genus recategorized_mic\n1 Intermediate        TET              0.50 0.997 Neisseria               0.5\n2 Intermediate        TET              0.50 0.997 Neisseria               0.5\n3 Intermediate        TET              1.00 0.997 Neisseria                 1\n4 Intermediate        TET              1.00 0.997 Neisseria                 1\n5 Intermediate        TET              0.38 0.997 Neisseria               0.5\n6 Intermediate        TET              0.38 0.997 Neisseria               0.5\n  phenotype_assigned\n1        Susceptible\n2        Susceptible\n3        Susceptible\n4        Susceptible\n5        Susceptible\n6        Susceptible",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Generating the Input File for Machine Learning and Deep Learning Models</span>"
    ]
  },
  {
    "objectID": "4_inpufile_MLandDL.html#step-2.-unir-archivos-de-test-y-training",
    "href": "4_inpufile_MLandDL.html#step-2.-unir-archivos-de-test-y-training",
    "title": "3  Generating the Input File for Machine Learning and Deep Learning Models",
    "section": "3.2 STEP 2. Unir archivos de test y training",
    "text": "3.2 STEP 2. Unir archivos de test y training\nJoin information according with metadata\n\n\nCode\n# 1. Remove columns from testing\ntest_inputfile &lt;- test_db_cleaned \ntest_inputfile$type &lt;- \"test\"\ntest_inputfile$phenotype_assigned &lt;- 0\ntest_inputfile$recategorized_mic &lt;- 0\ndim(test_inputfile) # [1] 4055    12\n\n\n[1] 4055   12\n\n\nCode\n# Unificar orden de las columnas\nglobal_cols &lt;- colnames(test_inputfile)\n\n# 2. Unique IDs\n# Join New MIC values (accession, phenotype_assigned, mic_new)\ntraining_inputfile &lt;- training_new_mic_db %&gt;%\n  select(-new_genus) \ntraining_inputfile$type &lt;- \"training\"\n# reordenar las columnas\ntraining_inputfile &lt;- training_inputfile %&gt;% \n  select(any_of(global_cols))\ndim(training_inputfile) # [1] 5720    12\n\n\n[1] 5720   12\n\n\nCode\nlength(unique(training_new_mic_db$accession)) \n\n\n[1] 5449\n\n\nCode\n# [1] 5449\n\n# 4. Join files \ntraining_and_test_inputfile &lt;- rbind(training_inputfile, test_inputfile)\n\n\nWarning in `[&lt;-.factor`(`*tmp*`, ri, value = c(0, 0, 0, 0, 0, 0, 0, 0, 0, :\ninvalid factor level, NA generated\n\n\nCode\n# eliminar duplicados\ntraining_and_test_inputfile &lt;- training_and_test_inputfile %&gt;% distinct()\ntable(training_and_test_inputfile$type)\n\n\n\n    test training \n    4055     5555 \n\n\nCode\n# test training \n# 4055    5555 #9775\n\ndim(training_and_test_inputfile)\n\n\n[1] 9610   12\n\n\nCode\n# [1] 9610   12\n\nlength(unique(training_and_test_inputfile$accession))# 9504 = 4055+5449\n\n\n[1] 9504\n\n\nCode\n# Join with RGI results\ntraining_and_test_inputfile_complete &lt;- training_and_test_inputfile %&gt;% \n  # Join rgi results\n  left_join(select(rgi_results, -genus, -species, -phenotype, \n                   -antibiotic, -measurement_value, -categoria_recodificada), by = \"accession\") %&gt;% \n  mutate(antibiotic = if_else( antibiotic == \"tetracycline\", \"TET\", antibiotic))\n\n# unique(training_and_test_inputfile$antibiotic)\n# [1] \"TET\" \"ERY\" \"GEN\" \"CAZ\"\n\n# Dimensions\ndim(training_and_test_inputfile_complete) # 9610 1081\n\n\n[1] 9610 1081\n\n\nCode\nlength(unique(training_and_test_inputfile_complete$accession)) #9504\n\n\n[1] 9504\n\n\ncolnames\n\n\nCode\ncolnames(training_and_test_inputfile)\n\n\n [1] \"genus\"               \"species\"             \"scientific_name_new\"\n [4] \"accession\"           \"genome\"              \"phenotype\"          \n [7] \"antibiotic\"          \"measurement_value\"   \"ani\"                \n[10] \"type\"                \"phenotype_assigned\"  \"recategorized_mic\"  \n\n\nCode\nstr(training_and_test_inputfile)\n\n\n'data.frame':   9610 obs. of  12 variables:\n $ genus              : chr  \"Neisseria\" \"Neisseria\" \"Neisseria\" \"Neisseria\" ...\n $ species            : chr  \"gonorrhoeae\" \"gonorrhoeae\" \"gonorrhoeae\" \"gonorrhoeae\" ...\n $ scientific_name_new: chr  \"Neisseria gonorrhoeae\" \"Neisseria gonorrhoeae\" \"Neisseria gonorrhoeae\" \"Neisseria gonorrhoeae\" ...\n $ accession          : chr  \"SRR1661238\" \"SRR5827180\" \"SRR5827125\" \"SRR5827026\" ...\n $ genome             : chr  \"ENA_SAMN03201584\" \"ENA_SAMN07351025\" \"ENA_SAMN07351011\" \"ENA_SAMN07351174\" ...\n $ phenotype          : chr  \"Susceptible\" \"Susceptible\" \"Susceptible\" \"Susceptible\" ...\n $ antibiotic         : chr  \"TET\" \"TET\" \"TET\" \"TET\" ...\n $ measurement_value  : chr  \"0.25\" \"0.12\" \"0.12\" \"0.12\" ...\n $ ani                : num  0.998 0.997 0.997 0.998 0.997 0.998 0.997 0.997 0.997 0.997 ...\n $ type               : chr  \"training\" \"training\" \"training\" \"training\" ...\n $ phenotype_assigned : chr  \"Susceptible\" \"Susceptible\" \"Susceptible\" \"Susceptible\" ...\n $ recategorized_mic  : Factor w/ 11 levels \"0.06\",\"0.12\",..: 3 2 2 2 3 2 1 3 1 2 ...\n\n\nCambiar NA por ceros, excepto de algunas columnas\n\n\nCode\ntraining_and_test_inputfile_complete &lt;- training_and_test_inputfile_complete %&gt;%\n  mutate(across(\n    .cols = -c(genome, measurement_value, ani, phenotype_assigned, recategorized_mic),\n    .fns  = ~ ifelse(is.na(.), 0, .)\n  ))\n\n\n\n\nCode\nhead(training_and_test_inputfile_complete) %&gt;% \n  DT::datatable()\n\n\n\n\n\n\nSave file\n\n\nCode\nwrite_tsv(training_and_test_inputfile_complete, file = here(\"rawdata/TrainAndTest_cleaned\", \"training_and_test_inputfile_cleaned.tsv.gz\"))\n\n\nChecar columnas con NA\n\n\nCode\ncolnames(training_and_test_inputfile_complete)[colSums(is.na(training_and_test_inputfile_complete)) &gt; 0]\n\n\n[1] \"genome\"             \"measurement_value\"  \"ani\"               \n[4] \"phenotype_assigned\" \"recategorized_mic\" \n\n\nChecar duplicados\n\n\nCode\ntraining_duplicadas &lt;- training_and_test_inputfile[duplicated(training_and_test_inputfile), ]\n\ntraining_duplicadas %&gt;% \n  filter(type == \"training\") \n\n\n [1] genus               species             scientific_name_new\n [4] accession           genome              phenotype          \n [7] antibiotic          measurement_value   ani                \n[10] type                phenotype_assigned  recategorized_mic  \n&lt;0 rows&gt; (or 0-length row.names)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Generating the Input File for Machine Learning and Deep Learning Models</span>"
    ]
  },
  {
    "objectID": "4_inpufile_MLandDL.html#step-3.-verificaciones-en-el-archivo-de-training",
    "href": "4_inpufile_MLandDL.html#step-3.-verificaciones-en-el-archivo-de-training",
    "title": "3  Generating the Input File for Machine Learning and Deep Learning Models",
    "section": "3.3 STEP 3. Verificaciones en el archivo de training",
    "text": "3.3 STEP 3. Verificaciones en el archivo de training\nVerificar que training no tenga NA\n\n\nCode\n# Detectar columnas con NA\ntraining_and_test_inputfile_complete %&gt;%\n  filter(type == \"training\") %&gt;%\n  summarise(across(everything(), ~ sum(is.na(.)))) %&gt;%\n  select(where(~ . &gt; 0)) %&gt;%\n  names()\n\n\n[1] \"genome\"             \"measurement_value\"  \"ani\"               \n[4] \"phenotype_assigned\" \"recategorized_mic\" \n\n\nCode\n# Que valores arroja\nunique(training_and_test_inputfile_complete$recategorized_mic)\n\n\n [1] 0.25 0.12 0.06 4    2    16   32   64   8    0.5  1    &lt;NA&gt;\nLevels: 0.06 0.12 0.25 0.5 1 2 4 8 16 32 64\n\n\nCode\n# Verificar las filas que dan NA\ntraining_and_test_inputfile_complete %&gt;%\n  filter(type == \"training\") %&gt;%\n  filter(is.na(recategorized_mic)) %&gt;%\n  DT::datatable()\n\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Generating the Input File for Machine Learning and Deep Learning Models</span>"
    ]
  },
  {
    "objectID": "4_inpufile_MLandDL.html#datos-faltantes-de-rgi",
    "href": "4_inpufile_MLandDL.html#datos-faltantes-de-rgi",
    "title": "3  Generating the Input File for Machine Learning and Deep Learning Models",
    "section": "3.4 Datos faltantes de RGI",
    "text": "3.4 Datos faltantes de RGI\nCuantas accesiones si tienes y no tienen resultados en RGI por accession:\n\n\nCode\n# Accession únicas en cada dataset\naccession_completo &lt;- training_and_test_inputfile_complete %&gt;% \n  distinct(accession)\n\naccession_con_rgi &lt;- rgi_results %&gt;% \n  distinct(accession)\n\n# Unir y clasificar\nresumen_rgi &lt;- accession_completo %&gt;%\n  mutate(has_rgi = accession %in% accession_con_rgi$accession) \nresumen_rgi_number &lt;- resumen_rgi %&gt;%\n  count(has_rgi)\n\nresumen_rgi_number\n\n\n  has_rgi    n\n1   FALSE   42\n2    TRUE 9462\n\n\nDe cuales especies no tenemos esta informacion\n\n\nCode\n# Obtener los SRA sin IDs\ntraining_sin_resultados_IDs &lt;- resumen_rgi %&gt;% \n  filter(has_rgi == \"FALSE\")\ntraining_sin_resultados_IDs &lt;- training_sin_resultados_IDs$accession\n\n# lista de acceesiones sin informacion \ntraining_sin_resultados_db &lt;- training_and_test_inputfile_complete %&gt;% \n  filter(accession %in% training_sin_resultados_IDs) \n\ntraining_sin_resultados_db %&gt;% \n  DT::datatable()\n\n\n\n\n\n\nCuantas especies no tienen informacion\n\n\nCode\ntable(training_sin_resultados_db$scientific_name_new)\n\n\n\n Acinetobacter baumannii     Campylobacter jejuni         Escherichia coli \n                      36                        3                        4 \n   Klebsiella pneumoniae    Neisseria gonorrhoeae      Salmonella enterica \n                       1                        2                        2 \n   Staphylococcus aureus Streptococcus pneumoniae \n                       7                       15 \n\n\n\n\n\n\n\n\nWarning\n\n\n\nLos resultados de RGI no tienen resultados para 42 accession IDs.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Generating the Input File for Machine Learning and Deep Learning Models</span>"
    ]
  }
]
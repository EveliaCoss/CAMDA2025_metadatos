{
  "hash": "44374fa846cd4bd2688db03f71b35fb7",
  "result": {
    "engine": "knitr",
    "markdown": "# Generating the Input File for Machine Learning and Deep Learning Models\n\n> Aim: To prepare the dataset for downstream predictive modeling, we merged three key sources of information:\n>\n> -   The cleaned training and test database (`training_db_cleaned and test_db_cleaned from complete_metadata.RData`)\n> -   A new dataset containing assigned MIC values for additional isolates ([`CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv))\n> -   The gene family matrix derived from the RGI analysis ([`2025_Training_and_testing_strict.tsv.gz`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/pangenomic_analysis/2025_Training_and_testing_strict.tsv.gz))\n>\n> This unified dataset serves as the foundation for training and evaluating machine learning (ML) and deep learning (DL) models aimed at predicting antimicrobial resistance patterns.\n>\n> -   **Author**: Evelia Coss\n> -   **Date**: 1/July/2025\n> -   **Input files:**\n>     -   [`complete_metadata.RData`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/complete_metadata.RData): This RData file contains a consolidated set of key objects used in workflows for antimicrobial resistance analysis and sequencing metadata. It supports smooth transitions between preprocessing, integration, and analysis stages. See complete details in [**Chapter 2**](https://eveliacoss.github.io/CAMDA2025_metadatos/2_Preprocessing_CAMDApublicdata.html).\n>     -   [`2025_Training_and_testing_strict.tsv.gz`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/rgi_analysis/2025_Training_and_testing_strict.tsv.gz)`:` Table containing results from RGI analysis using training and test datasets. This file originates from [Dataset2025](https://github.com/ccm-bioinfo/Camda_resistance_24-25/tree/main/DataSets/2025). It includes the following columns:\n>         -   **accession**, **genus**, **species**, **antibiotic** - Sample metadata. Note: some species annotations may contain inconsistencies due to accession-level discrepancies.\n>         -   **phenotype**, **measurement_value** - Prediction targets for modeling.\n>         -   **categoria_recodificada**- Proposed standardized MIC (Minimum Inhibitory Concentration) value for each sample (old version, 2024).\n>         -   **columns starting with 300...** - feature data. Contains counts of genes and SNPs conferring antibiotic resistance. Columns are labeled using ARO ids (see Section 3 for details). SNP features are labeled with the ARO id, followed by a dash (`-`) and the amino acid substitution.\n>     -   [`CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv): Table containing updated annotations of standardized MIC values (`recategorized_MIC`) and newly assigned phenotypes (`assign_phenotype`) for all samples. It includes the following columns:\n>         -   **genus**, **species**, **accession**, **antibiotic** - Sample metadata. Note: some species annotations may contain inconsistencies due to accession-level discrepancies.\n>         -   **phenotype**, **measurement_value** - Prediction targets for modeling.\n>         -   **recategorized_MIC**- Proposed standardized MIC (Minimum Inhibitory Concentration) value for each sample (new version, 2025).\n>         -   **assign_phenotype** – Reassigned binary phenotype, considering only “Resistant” and “Susceptible” categories.\n> -   Output files:\n>     -   [`training_and_test_inputfile_cleaned.tsv.gz`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/training_and_test_inputfile_cleaned.tsv.gz): Cleaned dataset (training ans test) containing standardized species names, reassigned MIC values (recategorized_mic), and curated phenotypes (assign_phenotype). This file is formatted and ready for input into machine learning (ML) and deep learning (DL) workflows. It includes the following columns:\n>         -   **genus**, **species**, **accession**, **phenotype**, **antibiotic,** **measurement_value** -Sample metadata with corrected species information. *Source:* `training_db_cleaned`\n>         -   **recategorized_MIC**- Updated (2025) standardized Minimum Inhibitory Concentration (MIC) values for each sample. *Source:* [`CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv)\n>         -   **assign_phenotype** –Reassigned phenotype labels, limited to “Resistant” and “Susceptible” categories. *Source:* [`CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv`](https://github.com/EveliaCoss/CAMDA2025_metadatos/blob/main/rawdata/TrainAndTest_cleaned/CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv)\n>         -   **type**: Dataset classification between training and test datasets.\n>         -   **columns starting with 300...** - feature data. Contains counts of genes and SNPs conferring antibiotic resistance. Columns are labeled using ARO ids (see Section 3 for details). SNP features are labeled with the ARO id, followed by a dash (`-`) and the amino acid substitution.\n\n### Import Data\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/ecoss/Documents/CAMDA2025_metadatos\n```\n\n\n:::\n\n```{.r .cell-code}\n# > training and test database\n# Load metadata cleaned and antibiogram information\nload(here(\"rawdata/TrainAndTest_cleaned\", \"complete_metadata.RData\"))\n# antibiograms_db, test_db_cleaned, training_db_cleaned, sra_metadata_db, test_completeInfo_db, training_cleanedInfo_db\n\n# > MIC values\nnew_mic_db <- read_csv(file= here(\"rawdata/TrainAndTest_cleaned\",\"CAMDA25_trainnig_metadatos_filtrado_con_assign_recategorizado.csv\")) %>%\n   # Standardizes column names: converts them to lowercase,\n  # replaces spaces and special characters with underscores\n  janitor::clean_names() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 5420 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): genus, species, accession, phenotype, antibiotic, assign_phenotype\ndbl (2): measurement_value, recategorized_MIC\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n#Rows: 5420 Columns: 8\n\n# > gene family matrix (strict)\n\n# Read the .csv file into R\nrgi_results <- read_tsv(file= here(\"rawdata/rgi_analysis\",\"2025_Training_and_testing_strict.tsv.gz\")) %>%\n   # Standardizes column names: converts them to lowercase,\n  # replaces spaces and special characters with underscores\n  janitor::clean_names() \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 9471 Columns: 1076\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr    (6): genus, species, accession, phenotype, antibiotic, measurement_value\ndbl (1070): categoria_recodificada, ARO3000464-A121D, ARO3000464-G120K, ARO3...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Rows: 9471 Columns: 1076\n```\n:::\n\n\n\n\n\n\n\n\n\nJoin information according with metadata\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# columns to remove from metadata\ncols_to_remove <- colnames(training_db_cleaned %>%\n  select(measurement_unit:collection_date, measurement_sign, measurement_unit,\n         scientific_name_CAMDA:status_reference))\n\n# 1. Remove columns from training\ntraining_inputfile <- training_db_cleaned %>%\n  # remove columns\n  select(-any_of(cols_to_remove)) %>%\n  # Seleccion de columnas solo specie y accession\n  select(accession)\nunique(training_inputfile$accession) %>% length()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5450\n```\n\n\n:::\n\n```{.r .cell-code}\n# [1] 5450\n\n# 2. Unique IDs\n# Join New MIC values (accession, phenotype_assigned, mic_new)\ntraining_inputfile_cleaned <- new_mic_db %>% \n  filter(accession %in% training_inputfile$accession)\ntraining_inputfile_cleaned$type <- \"training\"\ndim(training_inputfile_cleaned) # [1] 5420    9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5420    9\n```\n\n\n:::\n\n```{.r .cell-code}\n# 3. Remove columns from testing\ntest_inputfile <- test_db_cleaned %>%\n  # remove columns\n  select(-any_of(cols_to_remove)) \ntest_inputfile$type <- \"test\"\ntest_inputfile$assign_phenotype <- 0\ntest_inputfile$recategorized_mic <- 0\ndim(test_inputfile) # [1] 4055    9\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4055    9\n```\n\n\n:::\n\n```{.r .cell-code}\n# 4. Join files \ntraining_and_test_inputfile <- rbind(training_inputfile_cleaned, test_inputfile)\ntable(training_and_test_inputfile$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n    test training \n    4055     5420 \n```\n\n\n:::\n\n```{.r .cell-code}\n# test training \n# 4055     5420 #9475\n\n# Join with RGI results\ntraining_and_test_inputfile <- training_and_test_inputfile %>% \n  # Join rgi results\n  left_join(select(rgi_results, -genus, -species, -phenotype, \n                   -antibiotic, -measurement_value, -categoria_recodificada), by = \"accession\")\n\ndim(training_and_test_inputfile)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9475 1078\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\ncolnames\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(training_and_test_inputfile)[1:30]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"genus\"             \"species\"           \"accession\"        \n [4] \"phenotype\"         \"antibiotic\"        \"measurement_value\"\n [7] \"assign_phenotype\"  \"recategorized_mic\" \"type\"             \n[10] \"aro3000464_a121d\"  \"aro3000464_g120k\"  \"aro3003930_v57m\"  \n[13] \"aro3004833_l421p\"  \"aro3000816\"        \"aro3003961\"       \n[16] \"aro3000533\"        \"aro3000535\"        \"aro3004832_a311v\" \n[19] \"aro3004832_g545s\"  \"aro3004832_i312m\"  \"aro3004832_f504l\" \n[22] \"aro3004832_t483s\"  \"aro3004832_v316t\"  \"aro3004832_a510v\" \n[25] \"aro3004832_n512y\"  \"aro3003928_s91f\"   \"aro3000999\"       \n[28] \"aro3003929_s87r\"   \"aro3000186\"        \"aro3002630\"       \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nSave file\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_tsv(training_and_test_inputfile, file = here(\"rawdata/TrainAndTest_cleaned\", \"training_and_test_inputfile_cleaned.tsv.gz\"))\n```\n:::\n",
    "supporting": [
      "4_inpufile_MLandDL_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}